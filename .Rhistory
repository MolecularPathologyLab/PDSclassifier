get(genname, envir = envir)
remove.packages("vctrs")
use_r()
use_r('highMeanGene')
load_all()
check()
document()
use_mit_license()
use_mit_license('Sudhir Malla')
use_gpl3_license('Sudhir Malla')
use_mit_license('Sudhir Malla')
document()
use_package("dplyr")
document()
check()
use_r('PDSpredict')
load_all()
document()
check()
load("~/Dropbox/QUB PhD/Projects/PDSclassifier/R/sysdata.rda")
use_data(trainData, svm.model, mouse.c2.geneset.list, human.c2.geneset.list,
internal = TRUE, overwrite = TRUE)
document()
check()
load_all()
check()
load_all()
check()
search()
load_all()
check()
load_all()
check()
use_package("GSVA")
use_package("beepr")
use_package("sva")
check()
load("~/Dropbox/QUB PhD/Projects/PDSclassifier/data/testData.rda")
use_data(testData)
rm(testData)
document()
check()
PDSpredict(testData)
?PDSpredict
?highMeanGene
use_testthat()
use_test()
test_check("PDSclassifier")
library(testthat)
library(PDSclassifier)
test_check("PDSclassifier")
document()
check()
install()
library(PDSclassifier)
use_testthat()
use_test('highMeanGene')
library(testthat)
load_all()
test()
load("~/Dropbox/PDSclassifier/data/testData.rda")
load_all()
test()
highMeanGene(testData)
test_that("highMeanGene() selects unique genes with high mean value and returns gene expression matrix", {
expect_equal(highMeanGene(testData))
})
expect_equal(highMeanGene(testData[1:100,1:100]))
test_that("highMeanGene() selects unique genes with high mean value and returns gene expression matrix", {
expect_equal(highMeanGene(testData[1:100,1:100]))
})
use_test('PDSprediction')
load_all()
test()
PDSpredict(testData)
document()
load_all()
check()
search()
packageVersion("beepr")
document()
check()
?testData
document()
check()
remove.packages('PDSclassifier')
check()
document()
check()
?testData
document()
check()
document()
check()
document()
check()
document()
?testData
document()
check()
build("PDSclassifier")
build()
load_all()
use_package_doc()
document()
usethis::use_git_config()
use_git()
